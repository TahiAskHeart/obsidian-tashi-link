/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TashiLink
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  enableCreateAnchorLinkMenu: true,
  enableCreateBlockLinkMenu: true,
  enableCreateAnchorQuoteMenu: false,
  enableCreateBlockQuoteMenu: false
};
var TashiLink = class extends import_obsidian.Plugin {
  async onload() {
    console.log("\u52A0\u8F7D\u63D2\u4EF6");
    await this.loadSettings();
    this.CreateAnchorLinkMenu();
    this.CreateBlockLinkMenu();
    this.CreateAnchorQuoteMenu();
    this.CreateBlockQuoteMenu();
    this.addSettingTab(new TashiLinkSettingTab(this.app, this));
  }
  onunload() {
    console.log("\u5378\u8F7D\u63D2\u4EF6");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  //创建锚链接
  CreateAnchorLinkMenu() {
    this.app.workspace.on("editor-menu", (menu, editor, event) => {
      if (editor.getSelection() && this.settings.enableCreateAnchorLinkMenu) {
        const selectedText = editor.getSelection();
        const replaceText = `[[##${selectedText}|${selectedText}]]`;
        menu.addItem((item) => {
          item.setTitle(`\u521B\u5EFA\u951A\u94FE\u63A5 ${replaceText}`).setIcon("link").onClick(() => {
            editor.replaceSelection(replaceText);
            const cursorPosition = editor.getCursor();
            editor.setCursor({ line: cursorPosition.line, ch: cursorPosition.ch - selectedText.length - 3 });
          });
        });
      }
    });
  }
  //创建块链接
  CreateBlockLinkMenu() {
    this.app.workspace.on("editor-menu", (menu, editor, event) => {
      if (editor.getSelection() && this.settings.enableCreateBlockLinkMenu) {
        const selectedText = editor.getSelection();
        const replaceText = `[[^^${selectedText}|${selectedText}]]`;
        menu.addItem((item) => {
          item.setTitle(`\u521B\u5EFA\u5757\u94FE\u63A5 ${replaceText}`).setIcon("link-2").onClick(() => {
            editor.replaceSelection(replaceText);
            const cursorPosition = editor.getCursor();
            editor.setCursor({ line: cursorPosition.line, ch: cursorPosition.ch - selectedText.length - 3 });
          });
        });
      }
    });
  }
  //创建锚引用
  CreateAnchorQuoteMenu() {
    this.app.workspace.on("editor-menu", (menu, editor, event) => {
      if (editor.getSelection() && this.settings.enableCreateAnchorQuoteMenu) {
        const selectedText = editor.getSelection();
        const replaceText = `![[##${selectedText}|${selectedText}]]`;
        menu.addItem((item) => {
          item.setTitle(`\u521B\u5EFA\u951A\u5F15\u7528 ${replaceText}`).setIcon("link").onClick(() => {
            editor.replaceSelection(replaceText);
            const cursorPosition = editor.getCursor();
            editor.setCursor({ line: cursorPosition.line, ch: cursorPosition.ch - selectedText.length - 3 });
          });
        });
      }
    });
  }
  //创建块引用
  CreateBlockQuoteMenu() {
    this.app.workspace.on("editor-menu", (menu, editor, event) => {
      if (editor.getSelection() && this.settings.enableCreateBlockQuoteMenu) {
        const selectedText = editor.getSelection();
        const replaceText = `![[^^${selectedText}|${selectedText}]]`;
        menu.addItem((item) => {
          item.setTitle(`\u521B\u5EFA\u5757\u5F15\u7528 ${replaceText}`).setIcon("link-2").onClick(() => {
            editor.replaceSelection(replaceText);
            const cursorPosition = editor.getCursor();
            editor.setCursor({ line: cursorPosition.line, ch: cursorPosition.ch - selectedText.length - 3 });
          });
        });
      }
    });
  }
};
var TashiLinkSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("\u521B\u5EFA\u951A\u94FE\u63A5").setDesc("\u542F\u7528 \u521B\u5EFA\u951A\u94FE\u63A5").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableCreateAnchorLinkMenu).onChange(async (value) => {
        this.plugin.settings.enableCreateAnchorLinkMenu = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u521B\u5EFA\u5757\u94FE\u63A5").setDesc("\u542F\u7528 \u521B\u5EFA\u5757\u94FE\u63A5").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableCreateBlockLinkMenu).onChange(async (value) => {
        this.plugin.settings.enableCreateBlockLinkMenu = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u521B\u5EFA\u951A\u5F15\u7528").setDesc("\u542F\u7528 \u521B\u5EFA\u951A\u5F15\u7528").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableCreateAnchorQuoteMenu).onChange(async (value) => {
        this.plugin.settings.enableCreateAnchorQuoteMenu = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u521B\u5EFA\u5757\u5F15\u7528").setDesc("\u542F\u7528 \u521B\u5EFA\u5757\u5F15\u7528").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableCreateBlockQuoteMenu).onChange(async (value) => {
        this.plugin.settings.enableCreateBlockQuoteMenu = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
